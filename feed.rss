<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kevin Yap</title><link>http://kevinyap.ca/</link><description></description><atom:link href="http://kevinyap.ca/feed.rss" rel="self"></atom:link><lastBuildDate>Sat, 07 Dec 2013 00:00:00 -0800</lastBuildDate><item><title>Hosting With GitHub Pages</title><link>http://kevinyap.ca/2013/12/hosting-with-github-pages/</link><description>&lt;p&gt;Over the past couple of days, I made the switch to using GitHub as the hosting platform for my website by using &lt;a href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. This felt like a natural progression as I already used GitHub for version control for the source of my website. I initially thought the move would be confusing and time-consuming, but after the &lt;span class="caps"&gt;DNS&lt;/span&gt; changes propagated, everything was up and running just as it had been before the&amp;nbsp;move.&lt;/p&gt;
&lt;p&gt;When dealing with User Pages with GitHub Pages, the hosted files must be located in the &lt;code&gt;master&lt;/code&gt; branch of the repository. Since I didn&amp;#8217;t want to have separate repositories for the source of the website and for the generated files, I opted to make an orphaned branch named &lt;code&gt;src&lt;/code&gt; which would contain the source files. While I thought this would be complicated, it turned out to be quite&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;Within the root directory of my website&amp;#8217;s source, there is an &lt;code&gt;output&lt;/code&gt; directory that the static site files generated by &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; go. Prior to using GitHub Pages, I had written a Bash script that would run the &lt;code&gt;pelican&lt;/code&gt; command to generate the static site files and upload them using &lt;a href="http://en.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt;. Obviously, this script had to be rewritten, as in order to use GitHub Pages, changes need to be pushed to a Git repository rather than being uploaded to a web&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;To accomplish this, there are two Git repository: one in the root directory of my website&amp;#8217;s source and one in the output directory. Both remotes are configured to push to the same remote repository stored on GitHub. The local repository in the root directory has the &lt;code&gt;output/&lt;/code&gt; directory in its &lt;code&gt;.gitignore&lt;/code&gt; file and commits to the &lt;code&gt;src&lt;/code&gt; branch while the &lt;code&gt;output/&lt;/code&gt; repository commits to the &lt;code&gt;master&lt;/code&gt; branch. While they are technically part of the same remote repository, each local repository is completely separate from the&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;I created an &lt;span class="caps"&gt;SSH&lt;/span&gt; key so that I do not have to manually authenticate every time &lt;code&gt;git push&lt;/code&gt; is run by my site generation script. (Also because I have two-factor authentication enabled on my GitHub account.) While this did not work initially, it turns out that I was using the wrong remote &lt;span class="caps"&gt;URL&lt;/span&gt;; the proper &lt;span class="caps"&gt;URL&lt;/span&gt; to use over &lt;span class="caps"&gt;SSH&lt;/span&gt; (which in retrospect is quite obvious) is &lt;code&gt;ssh://git@github.com:username/repository.git&lt;/code&gt;, rather than the &lt;span class="caps"&gt;HTTPS&lt;/span&gt; clone &lt;span class="caps"&gt;URL&lt;/span&gt; that is shown by default on the right side of the page when browsing the repository through&amp;nbsp;GitHub.&lt;/p&gt;
&lt;p&gt;While I use &lt;a href="http://mac.github.com"&gt;GitHub for Mac&lt;/a&gt; to manage the repository for the source files (the &lt;code&gt;src&lt;/code&gt; branch), the repository for the &lt;code&gt;output/&lt;/code&gt; directory is only modified by the site generation script. Making use of &lt;a href="https://help.github.com/articles/github-flavored-markdown"&gt;GitHub Flavoured Markdown&lt;/a&gt;, the commit messages in the &lt;code&gt;master&lt;/code&gt; branch contain links to the most recent commit in the &lt;code&gt;src&lt;/code&gt; branch. When viewing the &lt;code&gt;master&lt;/code&gt; branch on GitHub, the &lt;a href="http://en.wikipedia.org/wiki/SHA-1"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt; hashes&lt;/a&gt; automagically link to the corresponding commits in the &lt;code&gt;src&lt;/code&gt; branch that generated the changes in the static site files, making it easy to determine what changes in the source files led to changes in the generated&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;To achieve this, the script runs the following code after the &lt;code&gt;pelican&lt;/code&gt; command generates the static site&amp;nbsp;files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$sourceDirectory&lt;/span&gt;
&lt;span class="nv"&gt;commitHash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse &lt;span class="caps"&gt;HEAD&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$outputDirectory&lt;/span&gt;
git checkout master
git add -A
&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Extended commit message: &amp;quot;&lt;/span&gt; commitMessage
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$commitMessage&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Generated by $commitHash&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Generated by $commitHash&amp;quot;&lt;/span&gt; -m &lt;span class="s2"&gt;&amp;quot;$commitMessage&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command &lt;code&gt;git rev-parse HEAD&lt;/code&gt; returns the hash of the last commit in the Git repository&amp;#8217;s history and is stored in the variable &lt;code&gt;$commitHash&lt;/code&gt;. The directory is then changed to &lt;code&gt;output/&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; is run to ensure the branch that changes will be committed to is the &lt;code&gt;master&lt;/code&gt; branch (not that it &lt;em&gt;should&lt;/em&gt; change, but in case I were to accidentally change branches manually, this would prevents anything problematic from happening). Any changes made are then added via &lt;code&gt;git add -A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Following this, the script prompts for an extended commit message (what gets shown on GitHub after expanding the message). The first line of the commit message is &amp;#8220;Generated by&amp;#8221; followed by the hash of the last commit made in the &lt;code&gt;src&lt;/code&gt; branch, and if an extended commit message is provided, the script will add it in. Finally, the commit is pushed to the &lt;code&gt;master&lt;/code&gt; branch on&amp;nbsp;GitHub.&lt;/p&gt;
&lt;p&gt;All in all, this solution seems to work very well. I would highly recommend using GitHub Pages for static&amp;nbsp;sites.&lt;/p&gt;</description><pubDate>Sat, 07 Dec 2013 00:00:00 -0800</pubDate><guid>tag:kevinyap.ca,2013-12-07:2013/12/hosting-with-github-pages/</guid></item><item><title>The Great (White) Pelican Migration</title><link>http://kevinyap.ca/2013/07/the-great-white-pelican-migration/</link><description>&lt;p&gt;When browsing &lt;a href="http://www.reddit.com/r/programming"&gt;/r/programming&lt;/a&gt; a while back, I came across a link to a blog post written by &lt;a href="http://www.gregreda.com"&gt;Greg Reda&lt;/a&gt;. While reading the post, I noticed the platform that his website was generated with &amp;#8212; &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; &amp;#8212; and at the time, I was in the process of searching for a replacement for WordPress. When I initially created kevinyap.ca, WordPress was appealing due to being easy-to-install &lt;span class="caps"&gt;CMS&lt;/span&gt; and versatile in its support and compatibility (themes and plugins), but over time I realized that it was too bulky; what I actually needed was a simple blogging platform rather than a full-fledged&amp;nbsp;&lt;span class="caps"&gt;CMS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I decided that it would be wise to make the move to another platform sooner rather than later, so I began the migration to Pelican. The transition from WordPress to Pelican was quite simple; the installation itself was fairly straightforward, and I manually transferred over my previous blog posts. (Pelican does have an automatic blog importer, but with the tiny number of previous posts, it was simpler to just complete the process&amp;nbsp;manually.)&lt;/p&gt;
&lt;p&gt;In my opinion, one of the most appealing features of using Pelican for a blog is the fact that posts (and pages) can be composed in Markdown, an easy-to-use and familiar markup language. This change also made it easier to incorporate &lt;a href="http://www.iawriter.com/"&gt;iA Writer&lt;/a&gt; into my blog-writing workflow instead of fumbling around with the WordPress dashboard consistently. Also, iA Writer’s iCloud integration makes it easy to write&amp;nbsp;anywhere.&lt;/p&gt;
&lt;p&gt;One minor hitch that I had was with setting up the &lt;a href="http://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt; extension for Markdown. In the configuration file for Pelican, I had the entry &lt;code&gt;MD_EXTENSIONS = ['codehilite']&lt;/code&gt;, as the documentation stated that &lt;code&gt;MD_EXTENSIONS&lt;/code&gt; needed to be defined as a list. Although this did not raise any warnings when generating the site through Pelican. When I added the &lt;a href="http://pythonhosted.org/Markdown/extensions/extra.html"&gt;Markdown Extra&lt;/a&gt; to the list of extensions &amp;#8212; &lt;code&gt;MD_EXTENSIONS = ['codehilite', 'extra']&lt;/code&gt; &amp;#8212; the code highlighting worked. Apparently there needed to be more than one item in the list of Markdown&amp;nbsp;extensions.&lt;/p&gt;
&lt;p&gt;Many thanks to Greg Reda whose Pelican theme (which can be found in the &lt;a href="http://github.com/gjreda/gregreda.com"&gt;GitHub repository&lt;/a&gt; for his website) I am currently using on my&amp;nbsp;website.&lt;/p&gt;</description><pubDate>Sun, 14 Jul 2013 00:00:00 -0700</pubDate><guid>tag:kevinyap.ca,2013-07-14:2013/07/the-great-white-pelican-migration/</guid></item><item><title>The Power of AppleScript</title><link>http://kevinyap.ca/2012/11/the-power-of-applescript/</link><description>&lt;p&gt;One of my favourite genres of music is video game music. Because of this, it was no surprise that I was ecstatic when OverClocked ReMix announced that ReMixes 1-2500 were available to download via torrent, and that every file contained &amp;#8220;complete and consistent &lt;span class="caps"&gt;ID3&lt;/span&gt; tags&amp;#8221;. While the tags for most fields are great, I wasn&amp;#8217;t particularly fond of the format of the track titles. Instead of &lt;em&gt;TrackName (GameName)&lt;/em&gt; like I would have preferred, the format was &lt;em&gt;GameName &amp;#8216;TrackName&amp;#8217; &lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&lt;/em&gt;. There are a few reasons why I don&amp;#8217;t like the provided format (namely that the &amp;#8220;&lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&amp;#8221; suffix feels redundant to me and it feels more appropriate to not see the songs grouped by their source game), but that&amp;#8217;s besides the&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;Obviously, manually renaming nearly 2500 tracks in iTunes would be a ridiculous undertaking. Luckily, AppleScript happens to be the perfect tool to automate this task. While I had never used AppleScript previous to this, the syntax was easy enough to learn quickly. &lt;a href="http://dougscripts.com/itunes/"&gt;Doug&amp;#8217;s AppleScripts for iTunes&lt;/a&gt; proved itself to be a useful resource for learning (and happens to be where I downloaded other scripts from in the past). It is also where I derived the skeleton of this script from. At first, I attempted to figured out how to handle regular expressions within strings in AppleScript, but I soon realized that a crude piece of code would work just as well; it just wouldn&amp;#8217;t be useful for any other situation. I set off in search of AppleScript documentation to learn to to manipulate the track name string in the way that I&amp;nbsp;wanted.&lt;/p&gt;
&lt;p&gt;The easiest part of the track title to manipulate was removing the &lt;em&gt;&lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&lt;/em&gt; text at the end of every track. The way I did it was by setting the track name track to itself after removing 9 characters from the end of the string (as it includes the leading space character). With AppleScript, this was very easy to do: &lt;code&gt;set trackName to text 1 thru -10 of trackName&lt;/code&gt; (-1 represents the last character in the string, so -2 would remove the last character, and so&amp;nbsp;on).&lt;/p&gt;
&lt;p&gt;After that, to search for the part of the string that contained the song name, I initially tried looking for the first apostrophe in the track title and used the next character as the beginning of the song name string, and ended the string one character before the end of the track title. In most cases, this would (as expected) take the text between the apostrophes &amp;#8212; the song name &amp;#8212; and store it in a dedicated song name string. Great! Fortunately, I tested this script in batches of 10 tracks or so at a time and manually vetted the result, as this definitely did not work. The flaw with this method may already be obvious; if the game name itself contained an apostrophe (for example, Legend of Zelda: Link&amp;#8217;s Awakening), the script would use all the characters after this apostrophe until the final apostrophe as the song name, which is&amp;nbsp;incorrect.&lt;/p&gt;
&lt;p&gt;The fix for this was simple enough. Instead of searching for the first apostrophe within the track title, I searched for the first space followed directly by an apostrophe, and altered the values that affect the length of the strings&amp;nbsp;accordingly.&lt;/p&gt;
&lt;p&gt;All in all, the script was certainly not pretty, but it did the job. I didn&amp;#8217;t notice any incorrectly reformatted names at first glance, but it is possible that a few oddly named songs were incorrectly renamed. I guess my point is that AppleScript was easy enough to work with (given rudimentary knowledge of how other programming languages function) that I was able to hack this very specifically-purposed script together in a short amount of time. Most of the code is based on words in English making it accessible to people who have never programmed before, and the AppleScript Editor gives an alert when saving or running the code if it is&amp;nbsp;invalid.&lt;/p&gt;
&lt;p&gt;If you want to use the script to rename to your own tracks (or just to examine my shoddily thrown together code), &lt;a href="/uploads/Reformat%20OverClocked%20ReMix%20Titles.scpt"&gt;here is a download link&lt;/a&gt;. Alternatively, here is the source code; to use the script, copy it into AppleScript Editor, select the tracks in iTunes, and run&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iTunes&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;sel&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;selection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;sel&lt;/span&gt; &lt;span class="ow"&gt;is not&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;repeat&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;track&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;sel&lt;/span&gt;        
            &lt;span class="c"&gt;-- Set trackName variable to name of track (track) &lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;trackName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;-- Strip &amp;quot; &lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&amp;quot; characters from end of track title&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;trackName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;thru&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;trackName&lt;/span&gt;

            &lt;span class="c"&gt;-- Find the location in the string where the song name begins (-2)&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;songTitleBegins&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;offset&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;trackName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;-- Store name of song in songName string&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;songName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;songTitleBegins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;thru&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;trackName&lt;/span&gt;

            &lt;span class="c"&gt;-- Find name of game&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;gameTitle&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;thru&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;songTitleBegins&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;trackName&lt;/span&gt;

            &lt;span class="c"&gt;-- Format new track name&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;newTrackName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;songName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;gameTitle&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;

            &lt;span class="c"&gt;-- Set name of track to newly formatted track name&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;track&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;newTrackName&lt;/span&gt;

        &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;repeat&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><pubDate>Wed, 28 Nov 2012 00:00:00 -0800</pubDate><guid>tag:kevinyap.ca,2012-11-28:2012/11/the-power-of-applescript/</guid></item><item><title>Hello, Blogosphere!</title><link>http://kevinyap.ca/2011/10/hello-blogosphere/</link><description>&lt;p&gt;After much consideration, I&amp;#8217;ve finally decided to start a blog. One reason is to expand my writing skills (I don&amp;#8217;t write nearly enough), but the main reason I&amp;#8217;ve decided to do so is because I now have my own space on the Internet to write about, well, anything&amp;nbsp;really.&lt;/p&gt;
&lt;p&gt;I suppose this is the obligatory mini-biography post, so here goes. I&amp;#8217;m a high school student living in Vancouver, Canada. I quite enjoy school, which I suppose is a good quality. I play the piano, and my favourite sport (to play) is Ultimate Frisbee, which is apparently very popular in the Pacific Northwest, something I wasn&amp;#8217;t aware of until I started playing. Music is one of my passions, and I enjoy composing music in my free time. I&amp;#8217;m also very interested in programming, and there&amp;#8217;s quite a story behind how I became interested in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;One Christmas, I got an iPod Touch as a present from my parents. It was a first generation iPod Touch, only running iPhone &lt;span class="caps"&gt;OS&lt;/span&gt; 1.1 at the time (it wasn&amp;#8217;t even called iOS back then). It was an amazing device, but the issue was there were no apps for it. The concept of third-party apps wasn&amp;#8217;t even existent. iPhone &lt;span class="caps"&gt;OS&lt;/span&gt; 1.1.3 added &amp;#8220;Web Clips&amp;#8221;, which were essentially pseudo-apps, or in other words, glorified bookmarks. What was truly amazing, though, was the release of iPhone &lt;span class="caps"&gt;OS&lt;/span&gt; 2.0. This &lt;span class="caps"&gt;OS&lt;/span&gt; update contained the debut of the App Store, and it was outstanding. The fact that you could find a game that looked interesting, buy it, and have it playable within a matter of minutes was mind-blowing. To put icing on the cake, the highly awaited games such as Enigmo and Super Monkey Ball were only $10 each, much less than games on any other console (although now, they&amp;#8217;re $1 and $3 respectively; that&amp;#8217;s a blog post for another time). Most apps and games were around the $3-$5 range at the time, and only your Apple &lt;span class="caps"&gt;ID&lt;/span&gt; password stood between you and a shiny new program for your&amp;nbsp;iDevice.&lt;/p&gt;
&lt;p&gt;When I learned that, unlike the other game consoles at the time, there was essentially no barrier to entry for programming iOS apps, I immediately checked it out. I downloaded Xcode and the iPhone &lt;span class="caps"&gt;SDK&lt;/span&gt; and messed around with it. I made very rudimentary apps, but nothing at all that was App Store-worthy. Eventually, I found a tutorial that explained how to make a basic Breakout-esque game, which I was pretty proud of. However, I soon realized that while I could follow a tutorial, I wasn&amp;#8217;t able to code on my own. I took a break from Objective-C for a while, and got a book on C. I also bought the &lt;span class="caps"&gt;PDF&lt;/span&gt; version of &lt;a href="http://learnpythonthehardway.org/"&gt;Learn Python the Hard Way&lt;/a&gt;, and worked my way through it. While I&amp;#8217;m gaining a better grasp on the concept of coding, I&amp;#8217;m still nowhere near being a programmer; I&amp;#8217;m slowly working on it though! As of now, I&amp;#8217;ve decided to take a break with learning how to program, and instead focus on other things, like making this&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;After having the idea to start a blog, I researched various blogging platforms, but it quickly became evident that I should use WordPress. Between being open-source, having the ability to be a &lt;span class="caps"&gt;CMS&lt;/span&gt; as well as a blog, and having a native-iOS app that I can potentially contribute to in the future, I knew it was the right choice. I&amp;#8217;m currently hosting my website with the great guys at &lt;a href="http://laughingsquid.us/"&gt;Laughing Squid&lt;/a&gt;, and here I am&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;At the moment, there are a few things I still need to take care of. Firstly, I need a title for my blog. Something clever and funny, but not cheesy. (Or perhaps so cheesy that it&amp;#8217;s funny and clever. Time will tell.) Personally, I quite like the look of the Twenty Eleven theme, even if it does gives off a &lt;em&gt;default blog&lt;/em&gt; vibe. So far, I haven&amp;#8217;t found any other themes that I particularly like, but I&amp;#8217;ll keep looking. Perhaps I&amp;#8217;ll even spring for a premium theme at some&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;So there it is, my attempt at a first blog&amp;nbsp;post.&lt;/p&gt;</description><pubDate>Sat, 15 Oct 2011 19:35:00 -0700</pubDate><guid>tag:kevinyap.ca,2011-10-15:2011/10/hello-blogosphere/</guid></item></channel></rss>